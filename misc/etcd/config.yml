# ---------- client configurations -------------------------------------------

#TODO: if collect data failed, now we can provide DEFAULT value from config. how about NO-DATA alert
#   like zabbix ?
#TODO: write time precision is limited to MS (milliseconds) only
#TODO: {{.Key}}.{{.Tags}}   if Tags is empty, key will have a trailing dot.  e.g.:  `metric1.`

client:
    # customize hostname, if omit this option, the client will use $(hostname) automatically
    # hostname: "test_server1"

    # minimal interval is 1s
    heartbeat_interval: 5s

    metric_enabled: true
    metric_interval: 2s

    # these tags will be appended into metrics' tags field. 
    # tags: {
    #    "bu": "hotel",
    #    "global": "tag",
    # }

    #TODO: enable_metadata
    # only opentsdb support metadata
    enable_metadata: false


    #TODO: merge_metadata_to_tags
    # If enable metadata, but backend don't support metadata. this option will merge all metadata
    # into tags
    merge_metadata_to_tags: false

# ---------- transport configurations -------------------------------------------

# graphtie and influxdb version below 0.9 don't support tags.  So we need to flatten the metric key with tags
# transport flat metric key format instruction:
#  
#  {{.Key}}             is the original metric key predefiend when the collector was created, which is a string. 
#                       you can only move its position back and forth. 
#  {{.Tags}}            is the tags field of the original metric object. which is like a dict in python with key-value pairs.
#                       if a metric point have a tags lets say: { host: "dev1", bu: "hotel" }, and you place `{{.Tags}}` in
#                       the option, the client will sort tags by key and join all key and value with "_", which with the previous
#                       example data, this string will be generated: "bu_hotel_host_dev1"
#  {{.Tags_host}}       hostname, all metric will automatically add hostname into tags
#  {{.Tags_xxx}}        you can also reference field of tags directly. once a field is referenced, it will be poped out, so
#                       all fields in {tags} will only appear once in generated flat metric key.  so if you have `{{Tgas_xxx}}` 
#                       and `{tags}` in the option at the same time, then `{tags}` will only applys to the remaining tags 
# Note: {{.Lv2.Lv2}}         Multiple leveled tempalte is not allowed

# when transport target host failed, the client will try to cache up requests into a file queue. once the target host
# back online again, the client will try to send cached requests back into target host. 
# this option can turn it on/off.  if this option is off, no reqeust will be cached.

# Try the best to report latest data to upstream is the core concept of the collector daemon. and then try to evenly
# distribute backfill workloads to prevent surge of pressure in upstream server. So two threads work seperately. 
# the first one report latest data with fixed interval, cache request if failed. 
# the second thread try to backfill data in cache with all following tweaks.

transport_stdout:
    enabled: false

transport_file:
    # output data into file
    enabled: false
    flush_interval: 100ms
    path: "/var/lib/hickwall/fileoutput.txt"
    # TODO: max_size, max_rotation
    # max_size: 10mb
    # max_rotation: 5

transport_graphite:
    -
        # metadata is nort supported with graphite backend
        enabled: false
        max_batch_size: 100
        interval: 1s
        merge_requests: false

        hosts: ["127.0.0.1:2003", "127.0.0.1:2004"]
        FlatTemplate: "{{.Key}}.{{.Tags}}"

transport_influxdb:
    -
        version: "0.9.0-rc7"    
        enabled: false
        max_batch_size: 200
        interval: 1s

        # try best to merge small group of points to no more thatn max_batch_size. this option is meant to
        # backfill data as quick as possible and at the same time don't add extra http request than usual.
        # If you have a large cluster. it's better turn this off. coz once queue is long and backend host is
        # backup online again. the network traffic will be a lot greater than normal in some cases. 
        merge_reqeusts: false

        # max cached reqeusts count
        max_queue_size: 100000

        url: "http://192.168.59.103:8086/write"
        username: "root"
        password: "root"
        database: "metrics"
        meta_database: "metrics_meta"

        retentionpolicy: "p1"

        backfill_enabled: true
        backfill_interval: 1s

        # Whether the client will try to cool down a little while if a response latency threshold reached when backfilling.
        backfill_handsoff: true
        backfill_latency_threshold_ms: 100
        backfill_cool_down: 5s      # cool down duration 

    -
        # because v0.8.8 don't support tags, so all tags will be flatten with
        # metric key following above `transport_flat_metric_key_format`
        version: "v0.8.8"
        enabled: true
        max_batch_size: 200
        interval: 1s
        merge_reqeusts: false

        # max cached reqeusts count
        max_queue_size: 100000

        # host: "192.168.59.103:8086"    # v0.8.8 why to config db host
        host: "10.3.6.207:8086"    # v0.8.8 why to config db host
        username: "root"
        password: "root"
        database: "metrics"
        meta_database: "metrics_meta"

        FlatTemplate: "{{.Key}}.{{.Tags}}"

        backfill_enabled: true
        backfill_interval: 1s
        backfill_handsoff: true
        backfill_latency_threshold_ms: 100
        backfill_cool_down: 5s

transport_kafka:
    broker_list: "192.168.100.67:6667,192.168.100.67:6668,192.168.100.67:6669,192.168.100.67:6670,192.168.100.67:6671"
    enabled: false

# ---------- collector configurations -------------------------------------------

# builtin collectors will always working without configurations

#TODO: different collector type: gauge, counter 

collector_win_sys:
    interval: 2s

    ## if omit `collect` option, this collector will collect all possible metrics.
    # collect:
    #     - "sys.cpu.load.1m"
    #     - "sys.cpu.load.5m"
    #     - "sys.cpu.load.15m"
    #     - "sys.processes.count"
    #     - "sys.memory.available.bytes"
    #     - "sys.memory.total"

collector_win_pdh:
    - 
        interval: 2s
        tags: {
            "bu": "train"
        }
        queries:
            -
                query: "\\System\\Processes"
                metric: "win.pdh.process_cnt"
                # metric: "win.processes.count"     duplicated metric key: win.processes.count
            - 
                query: "\\Memory\\Available Bytes"
                metric: "win.pdh.memory.available_bytes"

    - 
        interval: 2s
        tags: {
            "bu": "train"
        }
        queries: 
            -
                query: "\\System\\Processes"
                metric: "win.pdh.process_cnt_1"
                tags: {
                    "mount": "C",
                    "prodution": "中文",
                }
                #TODO: support meta
                # meta: {
                #     "unit": "bytes"
                # }
            - 
                query: "\\Memory\\Available Bytes"
                metric: "win.pdh.memory.available_bytes_1"
                tags: {
                    "mount": "C"
                }


# This collector is supplement for win_pdh. and is not performace optimized. so should be used with 
# limitations. Internally, all queries with in this collector will be executed sequencially.
collector_win_wmi:
    - 
        interval: 2s
        tags: {
            "bu": "train",
            "prodution": "短周期"
        }

        queries: 
            # - 
            #     # query: "select * from Win32_SystemServices where Name='W3svc'"
            #     query: "select * from Win32_Service where Name='W3svc'"
            #     metrics:
            #         # character cases matters here!!  
            #         -
            #             value_from: "State"
            #             metric: "win.wmi.service.iis.state"
            #             default: "IIS Not Installed"


            # - 
            #     # query: "select * from Win32_SystemServices where Name='W3svc'"
            #     query: "select * from Win32_Service where Name='W3svc'"
            #     metrics:
            #         # character cases matters here!!  
            #         -
            #             # default value
            #             value_from: "State"
            #             metric: "win.wmi.service.iis.state"
            #             default: "IIS Not Installed"


            # simplest query form. for single instance return query
            # - 
            #     # query: "wmic cpu get Name,NumberOfCores"
            #     query: "select Name, NumberOfCores from Win32_Processor"
            #     metrics:
            #         # character cases matters here!!  
            #         -
            #             value_from: "Name"
            #             metric: "win.wmi.cpu.name"
            #         -
            #             value_from: "NumberOfCores"
            #             metric: "win.wmi.cpu.numberofcores"

            # query with metric templating, tags for multiple instance return query
            - 
                # query: "wmic logicaldisk get Name, FileSystem, FreeSpace"
                # query: "wmic logicaldisk where 'mediatype=11 or mediatype=12' get Name, FileSystem, FreeSpace, Size"
                query: "select Name, FileSystem, FreeSpace, Size from Win32_LogicalDisk where MediaType=11 or mediatype=12"

                #  map[FreeSpace: Name:A: FileSystem:]
                #  map[Name:C: FileSystem:NTFS FreeSpace:57517752320]
                #  map[FileSystem:CDFS FreeSpace:0 Name:D:]

                # tags: {
                #     "tag_level": "query_tag"
                # }
                # metric string is a template. {Name} means use the value of `Name` Field of collected record. 
                metrics:
                    # character cases matters here!!  
                    -
                        value_from: "Size"
                        metric: "win.wmi.fs.size.bytes"
                        tags: {
                            "mount": "{{.Name}}",
                            # "fs_type": "{{.FileSystem}}",
                        }
                    -
                        value_from: "FreeSpace"
                        metric: "win.wmi.fs.freespace.bytes"
                        tags: {
                            "mount": "{{.Name}}",
                            # "fs_type": "{{.FileSystem}}",
                        }
                        #TODO: support meta
                        # meta: {
                        #     "unit": "bytes"
                        # }
                    # - 
                    #     value_from: "FileSystem"
                    #     metric: "win.wmi.fs.{{.Name}}.filesystem"

    - 
        interval: 5s
        tags: {
            "bu": "train",
            "prodution": "长周期"
        }

        queries: 
            # simplest query form. for single instance return query
            - 
                query: "select Name, NumberOfCores from Win32_Processor"
                metrics:
                    # character cases matters here!!  
                    -
                        value_from: "Name"
                        metric: "win.wmi.cpu.name"
                    -
                        value_from: "NumberOfCores"
                        metric: "win.wmi.cpu.numberofcores"


#TODO: collector_cmd:
collector_cmd:
    - 
        cmd: 
            - 'c:\python27\python.exe'
            - 'D:\Users\rhtang\oledev\gocodez\src\github.com\oliveagle\hickwall\misc\collector_cmd.py'
        # interval: s - seconds, m - minutes, h - hours
        interval: 1s



# TODO: collector_ping
collector_ping:
    -
        # in seconds
        interval: 10s
        metric_key: "ping"
        tags: [
            [ "some", "test2"]
        ]
        targets:
            - "www.baidu.com"
            - "www.12306.com"
        timeout: 50ms
        packets: 5
        collect:
            - "time_min"
            - "time_avg"
            - "time_max"
            - "time_mdev"
            - "lost_pct"
            - "ip"

#         # metrics:
#         #   ping.time_min    {"some": "test2", "target": "www.baidu.com", "host": "DST2332"}  28.307
#         #   ping.time_avg    {"some": "test2", "target": "www.baidu.com", "host": "DST2332"}  30.372
#         #   ping.time_max    {"some": "test2", "target": "www.baidu.com", "host": "DST2332"}  34.360
#         #   ping.time_mdev   {"some": "test2", "target": "www.baidu.com", "host": "DST2332"}  2.192
#         #   ping.lost_pct    {"some": "test2", "target": "www.baidu.com", "host": "DST2332"}  0.0

#         #   ping.time_min    {"some": "test2", "target": "www.12306.com", "host": "DST2332"}  28.307
#         #   ping.time_avg    {"some": "test2", "target": "www.12306.com", "host": "DST2332"}  30.372
#         #   ping.time_max    {"some": "test2", "target": "www.12306.com", "host": "DST2332"}  34.360
#         #   ping.time_mdev   {"some": "test2", "target": "www.12306.com", "host": "DST2332"}  2.192
#         #   ping.lost_pct    {"some": "test2", "target": "www.12306.com", "host": "DST2332"}  0.0
